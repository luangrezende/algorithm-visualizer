name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'AlgorithmVisualizer.UI/AlgorithmVisualizer.UI.csproj'
  SOLUTION_PATH: 'AlgorithmVisualizer.sln'
  PROJECT_NAME: 'AlgorithmVisualizer'
  ARTIFACT_NAME: 'algorithm-visualizer'

jobs:
  build-and-release:
    name: Build and Release
    runs-on: windows-latest
    permissions:
      contents: write
      actions: read
      packages: write
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Get Version
      id: version
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.version }}"
        } else {
          $version = "${{ github.ref_name }}"
        }
        $versionNumber = $version -replace '^v', ''
        Write-Output "version=$version" >> $env:GITHUB_OUTPUT
        Write-Output "version_number=$versionNumber" >> $env:GITHUB_OUTPUT
        Write-Output "Version: $version, Version Number: $versionNumber"
      shell: powershell

    - name: Extract Project Info
      id: project_info
      run: |
        # Extract project name from repository name if needed
        $repoName = "${{ github.repository }}" -split "/" | Select-Object -Last 1
        $projectDisplayName = $repoName -replace '-', ' ' | ForEach-Object {(Get-Culture).TextInfo.ToTitleCase($_)}
        
        Write-Output "repo_name=$repoName" >> $env:GITHUB_OUTPUT  
        Write-Output "display_name=$projectDisplayName" >> $env:GITHUB_OUTPUT
        Write-Output "Repository: $repoName, Display Name: $projectDisplayName"
      shell: powershell

    - name: Restore Dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build Solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

    - name: Run Tests
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"

    - name: Publish Application (Windows x64)
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} `
          --configuration Release `
          --runtime win-x64 `
          --self-contained `
          --output "./publish/win-x64" `
          -p:PublishSingleFile=true `
          -p:PublishTrimmed=false `
          -p:IncludeNativeLibrariesForSelfExtract=true `
          -p:GenerateDocumentationFile=false `
          -p:DebugType=None `
          -p:DebugSymbols=false `
          -p:AssemblyVersion=${{ steps.version.outputs.version_number }} `
          -p:FileVersion=${{ steps.version.outputs.version_number }} `
          -p:InformationalVersion=${{ steps.version.outputs.version }}

    - name: Create Release Archive
      run: |
        # Create release archive
        Compress-Archive -Path "./publish/win-x64/*" -DestinationPath "./${{ env.PROJECT_NAME }}-${{ steps.version.outputs.version }}-win.zip"
        
        # Verify archive was created
        $archive = Get-Item "${{ env.PROJECT_NAME }}-${{ steps.version.outputs.version }}-win.zip"
        Write-Host "Created archive: $($archive.Name) - $([math]::Round($archive.Length / 1MB, 2)) MB"
      shell: powershell

    - name: Generate Release Notes
      id: release_notes
      run: |
        # Get the previous tag for comparison
        $previousTag = $null
        try {
          $previousTag = git describe --tags --abbrev=0 HEAD~1 2>$null
          if ($LASTEXITCODE -ne 0) { $previousTag = $null }
        } catch {
          $previousTag = $null
        }
        
        # Get commits since last release or all commits if no previous tag
        if ($previousTag) {
          $commits = git log --pretty=format:"- %s" $previousTag..HEAD
          $changelogUrl = "https://github.com/${{ github.repository }}/compare/$previousTag...${{ steps.version.outputs.version }}"
        } else {
          # First release - get recent commits
          $commits = git log --pretty=format:"- %s" -10
          $changelogUrl = "https://github.com/${{ github.repository }}/commits/${{ steps.version.outputs.version }}"
        }
        
        # Handle case where no commits are found
        if (-not $commits) {
          $commits = "- Initial release"
        }
        
        # Generate release notes
        $releaseNotes = @"
        ## ðŸš€ ${{ env.PROJECT_NAME }} ${{ steps.version.outputs.version }}
        
        Interactive sorting algorithm visualizer for educational purposes.
        
        ### ðŸ“‹ What's Changed
        $commits
        
        ### ï¿½ Quick Start
        1. **Download** the ZIP file below
        2. **Extract** to any folder
        3. **Run** ``AlgorithmVisualizer.exe``
        4. **Select** an algorithm and customize array size/speed
        5. **Click Start** to watch the sorting visualization
        
        ### âœ¨ Features
        - 6 sorting algorithms with real-time visualization
        - Adjustable array size (10-500 elements)
        - Variable speed control for learning
        - Performance metrics and comparisons
        - No installation required - just download and run!
        
        ### ðŸ’» Requirements
        - Windows 10/11 (64-bit)
        - No additional software needed
        
        ---
        ðŸ“¦ **Download**: ``${{ env.PROJECT_NAME }}-${{ steps.version.outputs.version }}-win.zip``
        
        ðŸ“š **Full Changelog**: $changelogUrl
        "@
        
        # Save release notes as multiline output
        Write-Output "notes<<EOF" >> $env:GITHUB_OUTPUT
        Write-Output $releaseNotes >> $env:GITHUB_OUTPUT
        Write-Output "EOF" >> $env:GITHUB_OUTPUT
      shell: powershell

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: ${{ env.PROJECT_NAME }} ${{ steps.version.outputs.version }}
        body: ${{ steps.release_notes.outputs.notes }}
        draft: false
        prerelease: false
        files: |
          ${{ env.PROJECT_NAME }}-${{ steps.version.outputs.version }}-win.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}-${{ steps.version.outputs.version }}
        path: |
          ./${{ env.PROJECT_NAME }}-${{ steps.version.outputs.version }}-win.zip
        retention-days: 30
