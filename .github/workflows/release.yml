name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'AlgorithmVisualizer.UI/AlgorithmVisualizer.UI.csproj'
  SOLUTION_PATH: 'AlgorithmVisualizer.sln'
  PROJECT_NAME: 'AlgorithmVisualizer'
  ARTIFACT_NAME: 'algorithm-visualizer'

jobs:
  build-and-release:
    name: Build and Release
    runs-on: windows-latest
    permissions:
      contents: write
      actions: read
      packages: write
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Get Version
      id: version
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.version }}"
        } else {
          $version = "${{ github.ref_name }}"
        }
        $versionNumber = $version -replace '^v', ''
        Write-Output "version=$version" >> $env:GITHUB_OUTPUT
        Write-Output "version_number=$versionNumber" >> $env:GITHUB_OUTPUT
        Write-Output "Version: $version, Version Number: $versionNumber"
      shell: powershell

    - name: Extract Project Info
      id: project_info
      run: |
        # Extract project name from repository name if needed
        $repoName = "${{ github.repository }}" -split "/" | Select-Object -Last 1
        $projectDisplayName = $repoName -replace '-', ' ' | ForEach-Object {(Get-Culture).TextInfo.ToTitleCase($_)}
        
        Write-Output "repo_name=$repoName" >> $env:GITHUB_OUTPUT  
        Write-Output "display_name=$projectDisplayName" >> $env:GITHUB_OUTPUT
        Write-Output "Repository: $repoName, Display Name: $projectDisplayName"
      shell: powershell

    - name: Restore Dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build Solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

    - name: Run Tests
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"

    - name: Publish Self-Contained (Windows x64)
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} `
          --configuration Release `
          --runtime win-x64 `
          --self-contained `
          --output "./publish/win-x64-selfcontained" `
          -p:PublishSingleFile=true `
          -p:PublishTrimmed=false `
          -p:IncludeNativeLibrariesForSelfExtract=true `
          -p:AssemblyVersion=${{ steps.version.outputs.version_number }} `
          -p:FileVersion=${{ steps.version.outputs.version_number }} `
          -p:InformationalVersion=${{ steps.version.outputs.version }}

    - name: Publish Framework-Dependent (Windows x64)
      run: |
        dotnet publish ${{ env.PROJECT_PATH }} `
          --configuration Release `
          --runtime win-x64 `
          --no-self-contained `
          --output "./publish/win-x64-framework" `
          -p:PublishSingleFile=true `
          -p:AssemblyVersion=${{ steps.version.outputs.version_number }} `
          -p:FileVersion=${{ steps.version.outputs.version_number }} `
          -p:InformationalVersion=${{ steps.version.outputs.version }}

    - name: Create Release Archives
      run: |
        # Create self-contained archive
        Compress-Archive -Path "./publish/win-x64-selfcontained/*" -DestinationPath "./${{ env.PROJECT_NAME }}-${{ steps.version.outputs.version }}-win-x64-selfcontained.zip"
        
        # Create framework-dependent archive  
        Compress-Archive -Path "./publish/win-x64-framework/*" -DestinationPath "./${{ env.PROJECT_NAME }}-${{ steps.version.outputs.version }}-win-x64-framework.zip"
        
        # Verify archives were created
        Write-Host "Created archives:"
        Get-ChildItem "${{ env.PROJECT_NAME }}-${{ steps.version.outputs.version }}-*.zip" | ForEach-Object {
          Write-Host "  $($_.Name) - $([math]::Round($_.Length / 1MB, 2)) MB"
        }
      shell: powershell

    - name: Generate Release Notes
      id: release_notes
      run: |
        # Get the previous tag for comparison
        $previousTag = git describe --tags --abbrev=0 HEAD~1 2>$null
        if (-not $previousTag) {
          $previousTag = "HEAD~10"  # Fallback if no previous tag
        }
        
        # Get commits since last release
        $commits = git log --pretty=format:"- %s" $previousTag..HEAD
        
        # Generate release notes
        $releaseNotes = @"
        ## ${{ env.PROJECT_NAME }} ${{ steps.version.outputs.version }}
        
        ### üìù Changes in this release
        $commits
        
        ### üì¶ Download Options
        
        **Self-Contained (Recommended)**
        - No .NET installation required
        - File: ``${{ env.PROJECT_NAME }}-${{ steps.version.outputs.version }}-win-x64-selfcontained.zip``
        
        **Framework-Dependent**
        - Requires .NET 8.0 Runtime
        - File: ``${{ env.PROJECT_NAME }}-${{ steps.version.outputs.version }}-win-x64-framework.zip``
        
        ### üéØ Supported Algorithms
        Bubble Sort ‚Ä¢ Quick Sort ‚Ä¢ Merge Sort ‚Ä¢ Selection Sort ‚Ä¢ Insertion Sort ‚Ä¢ Heap Sort
        
        ### üíª System Requirements
        - Windows 10/11 (x64)
        - .NET 8.0 Runtime (included in self-contained)
        
        ---
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$previousTag...${{ steps.version.outputs.version }}
        "@
        
        # Save release notes as multiline output
        Write-Output "notes<<EOF" >> $env:GITHUB_OUTPUT
        Write-Output $releaseNotes >> $env:GITHUB_OUTPUT
        Write-Output "EOF" >> $env:GITHUB_OUTPUT
      shell: powershell

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: ${{ env.PROJECT_NAME }} ${{ steps.version.outputs.version }}
        body: ${{ steps.release_notes.outputs.notes }}
        draft: false
        prerelease: false
        files: |
          ${{ env.PROJECT_NAME }}-${{ steps.version.outputs.version }}-win-x64-selfcontained.zip
          ${{ env.PROJECT_NAME }}-${{ steps.version.outputs.version }}-win-x64-framework.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}-${{ steps.version.outputs.version }}
        path: |
          ./${{ env.PROJECT_NAME }}-${{ steps.version.outputs.version }}-win-x64-selfcontained.zip
          ./${{ env.PROJECT_NAME }}-${{ steps.version.outputs.version }}-win-x64-framework.zip
        retention-days: 30
